// Generated by gencpp from file random_number_generator/rn.msg
// DO NOT EDIT!


#ifndef RANDOM_NUMBER_GENERATOR_MESSAGE_RN_H
#define RANDOM_NUMBER_GENERATOR_MESSAGE_RN_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace random_number_generator
{
template <class ContainerAllocator>
struct rn_
{
  typedef rn_<ContainerAllocator> Type;

  rn_()
    : limit(0)
    , randint(0)  {
    }
  rn_(const ContainerAllocator& _alloc)
    : limit(0)
    , randint(0)  {
  (void)_alloc;
    }



   typedef int32_t _limit_type;
  _limit_type limit;

   typedef int32_t _randint_type;
  _randint_type randint;





  typedef boost::shared_ptr< ::random_number_generator::rn_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::random_number_generator::rn_<ContainerAllocator> const> ConstPtr;

}; // struct rn_

typedef ::random_number_generator::rn_<std::allocator<void> > rn;

typedef boost::shared_ptr< ::random_number_generator::rn > rnPtr;
typedef boost::shared_ptr< ::random_number_generator::rn const> rnConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::random_number_generator::rn_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::random_number_generator::rn_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace random_number_generator

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'random_number_generator': ['/home/bongwon/catkin_ws/src/random_number_generator/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::random_number_generator::rn_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::random_number_generator::rn_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::random_number_generator::rn_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::random_number_generator::rn_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::random_number_generator::rn_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::random_number_generator::rn_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::random_number_generator::rn_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ee411822668b6440d55b15e5b8788d4f";
  }

  static const char* value(const ::random_number_generator::rn_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xee411822668b6440ULL;
  static const uint64_t static_value2 = 0xd55b15e5b8788d4fULL;
};

template<class ContainerAllocator>
struct DataType< ::random_number_generator::rn_<ContainerAllocator> >
{
  static const char* value()
  {
    return "random_number_generator/rn";
  }

  static const char* value(const ::random_number_generator::rn_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::random_number_generator::rn_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 limit\n\
int32 randint\n\
";
  }

  static const char* value(const ::random_number_generator::rn_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::random_number_generator::rn_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.limit);
      stream.next(m.randint);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct rn_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::random_number_generator::rn_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::random_number_generator::rn_<ContainerAllocator>& v)
  {
    s << indent << "limit: ";
    Printer<int32_t>::stream(s, indent + "  ", v.limit);
    s << indent << "randint: ";
    Printer<int32_t>::stream(s, indent + "  ", v.randint);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RANDOM_NUMBER_GENERATOR_MESSAGE_RN_H
